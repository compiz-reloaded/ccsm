#!/usr/bin/env python

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Authors: Quinn Storm (quinn@beryl-project.org)
# Copyright (C) 2007 Quinn Storm



import bsettings
import gtk
import gtk.gdk
import gobject
import os
import re
gdk = gtk.gdk
from xml.sax.saxutils import escape as EscapeMarkup

class Item:
	def __init__(self):
		pass

	def SetSelected(self,Selected):
		if (Selected):
			self.Label.set_markup("<b><i>%s</i></b>"%self.Name)
		else:
			self.Label.set_text(self.Name)

class Chooser:
	def __init__(self):
		self.ClientArea = gtk.Alignment()
		self.ClientArea.props.xalign=0
		self.ClientArea.props.yalign=0
		self.ClientArea.props.xscale=1
		self.ClientArea.props.yscale=1
		self.Items=[]

	def AddItem(self,Item):
		self.Items.append(Item)
		Item.Selector.connect('button-press-event',self.SelectItem,len(self.Items)-1)
		self.Strip.pack_start(Item.Selector)

	def SelectItem(self,Ebox,Event,Indx):
		for Item in self.Items:
			Item.SetSelected(False)
		Item = self.Items[Indx]
		Item.SetSelected(True)
		if self.ClientArea.get_child():
			self.ClientArea.remove(self.ClientArea.get_child())
		self.ClientArea.add(Item.Client)
		Item.Client.show_all()

class SettingItem:
	def __init__(self,Setting):
		self.Setting = Setting
		self.Block = 0
		self.MakeLabel()
		self.Reset = gtk.Button()
		self.Reset.set_image(gtk.image_new_from_stock(
			gtk.STOCK_CLEAR,gtk.ICON_SIZE_BUTTON))
		self.Reset.connect('clicked',self.DoReset)
		self._Init()

	def _Init(self):
		print 'Pure Virtual Init Called'
	
	def DoReset(self,foo):
		self.Setting.Reset()
		self.Setting.Plugin.Context.Write()
		self.Read()

	def MakeLabel(self):
		self.Label = gtk.Label(self.Setting.ShortDesc)

	def Read(self):
		self.Block = self.Block + 1
		self._Read()
		self.Block = self.Block - 1

	def _Read(self):
		print 'Pure Virtual Read Called'

	def Changed(self, *args, **kwargs):
		if self.Block == 0:
			self._Changed()
			self.Setting.Plugin.Context.Write()

	def _Changed(self):
		print 'Pure Virtual Changed Called'

class StringMatchSetting(SettingItem):
	def _Init(self):
		self.Widget = gtk.Entry()
		self.Widget.connect('changed',self.Changed)
	def _Read(self):
		self.Widget.set_text(self.Setting.Value)
	def _Changed(self):
		self.Setting.Value = self.Widget.get_text()

class StringChoiceSetting(SettingItem):
	def _Init(self):
		self.Widget = gtk.combo_box_new_text()
		for Text in self.Setting.Info:
			self.Widget.append_text(Text)
		self.Widget.connect('changed',self.Changed)
	def _Read(self):
		indx=0
		for n in self.Setting.Info:
			if self.Setting.Value == n:
				break
			indx=indx+1
		self.Widget.set_active(indx)
	def _Changed(self):
		self.Setting.Value = self.Widget.get_active_text()

class BoolSetting(SettingItem):
	def _Init(self):
		self.Widget = gtk.CheckButton()
	def _Read(self):
		self.Widget.set_active(self.Setting.Value)
	def _Changed(self):
		self.Setting.Value = self.Widget.get_active()

class IntFloatSetting(SettingItem):
	def _Init(self):
		self.Widget = gtk.HBox()
		if self.Setting.Type == 'Int':
			inc = 1
		else:
			inc = self.Setting.Info[2]
		self.Adj = gtk.Adjustment(self.Setting.Value,
				self.Setting.Info[0],self.Setting.Info[1],
				inc,inc*10)
		self.Spin = gtk.SpinButton(self.Adj)
		if self.Setting.Type == 'Float':
			self.Spin.set_digits(4)
		self.Scale = gtk.HScale(self.Adj)
		self.Scale.props.draw_value = False
		self.Widget.pack_start(self.Scale,True,True)
		self.Widget.pack_start(self.Spin,False,False)
		self.Adj.connect('value-changed',self.Changed)
	def _Read(self):
		self.Adj.set_value(self.Setting.Value)
	def _Changed(self):
		self.Setting.Value = self.Adj.get_value()

class ColorSetting(SettingItem):
	def _Init(self):
		self.Widget = gtk.ColorButton()
		self.Widget.set_use_alpha(True)
		self.Widget.connect('color-set',self.Changed)
	def _Read(self):
		col = gdk.Color()
		col.red=self.Setting.Value[0]
		col.green=self.Setting.Value[1]
		col.blue=self.Setting.Value[2]
		self.Widget.set_color(col)
		self.Widget.set_alpha(self.Setting.Value[3])
	def _Changed(self):
		col = self.Widget.get_color()
		alpha = self.Widget.get_alpha()
		self.Setting.Value = [col.red,col.green,col.blue,alpha]

def MakeSetting(Setting):
	if Setting.Type == 'String' and len(Setting.Info):
		return StringChoiceSetting(Setting)
	elif Setting.Type == 'String' or Setting.Type == 'Match':
		return StringMatchSetting(Setting)
	elif Setting.Type == 'Bool':
		return BoolSetting(Setting)
	elif Setting.Type == 'Float' or Setting.Type == 'Int':
		return IntFloatSetting(Setting)
	elif Setting.Type == 'Color':
		return ColorSetting(Setting)
	return None

class SubGroupArea:
	def __init__(self,Name,SubGroup):
		if Name == '':
			self.Widget = gtk.Table()
			self.Child = self.Widget
		else:
			self.Widget = gtk.Frame()
			self.Expander = gtk.Expander(Name)
			self.Widget.add(self.Expander)
			self.Expander.set_expanded(False)
			self.Child = gtk.Table()
			self.Expander.add(self.Child)
		self.Empty = True
		self.Child.attach(gtk.Label('Name'),0,1,0,1,0)
		self.Child.attach(gtk.VSeparator(),1,2,0,1,0)
		self.Child.attach(gtk.Label('Value'),2,4,0,1)
		self.Child.attach(gtk.HSeparator(),0,4,1,2)
		row = 2
		for Set in SubGroup.Display:
			if not Set == '____plugin_enabled':
				sit = MakeSetting(SubGroup.Display[Set])
				if sit is not None:
					sit.Read()
					self.Child.attach(sit.Label,0,1,row,row+1,0)
					self.Child.attach(sit.Widget,2,3,row,row+1)
					self.Child.attach(sit.Reset,3,4,row,row+1,0)
					row=row+1
					self.Empty = False
		for Scr in SubGroup.Screens:
			for Set in Scr:
				sit = MakeSetting(Scr[Set])
				if sit is not None:
					sit.Read()
					self.Child.attach(sit.Label,0,1,row,row+1,0)
					self.Child.attach(sit.Widget,2,3,row,row+1)
					self.Child.attach(sit.Reset,3,4,row,row+1,0)
					row=row+1
					self.Empty = False
		self.Child.attach(gtk.VSeparator(),1,2,2,row+1,0)

class GroupPage:
	def __init__(self,Name,Group):
		self.Widget = gtk.VBox()
		self.SetContainer = gtk.VBox()
		Scroll = gtk.ScrolledWindow()
		Scroll.props.hscrollbar_policy = gtk.POLICY_NEVER
		Scroll.props.vscrollbar_policy = gtk.POLICY_AUTOMATIC
		View = gtk.Viewport()
		self.Widget.pack_start(Scroll,True,True)
		Scroll.add(View)
		View.add(self.SetContainer)
		self.Empty = True
		if (Group.has_key('')):
			sga = SubGroupArea('',Group[''])
			if not sga.Empty:
				self.SetContainer.pack_start(sga.Widget,False,False)
				self.Empty = False
		for SubGroup in Group:
			if not SubGroup == '':
				sga = SubGroupArea(SubGroup,Group[SubGroup])
				if not sga.Empty:
					self.SetContainer.pack_start(sga.Widget,False,False)
					self.Empty = False

class PlugItem(Item):
	def __init__(self,Plugin):
		self.Selector = gtk.EventBox()
		self.Label = gtk.Label(Plugin.ShortDesc)
		self.Name = Plugin.ShortDesc
		self.VBox = gtk.VBox()
		self.Selector.add(self.VBox)
		self.VBox.pack_start(self.Label)
		self.Client = gtk.VBox()
		self.Client.pack_start(gtk.Label(Plugin.LongDesc),False,False)
		self.Client.pack_start(gtk.HSeparator(),False,False)
		self.Groups = gtk.Notebook()
		self.Client.pack_start(self.Groups,True,True)
		for n in Plugin.Groups:
			Name = n
			if Name == '':
				Name = 'General'
			gp = GroupPage(Name,Plugin.Groups[n])
			if not gp.Empty:
				self.Groups.append_page(gp.Widget,gtk.Label(Name))

class PlugChooser(Chooser):
	def __init__(self,Plugins):
		Chooser.__init__(self)
		self.Widget = gtk.HBox()
		self.Strip = gtk.VBox(True)
		self.LeftWin = gtk.Viewport()
		self.LeftScroll = gtk.ScrolledWindow()
		self.LeftWin.add(self.Strip)
		self.LeftScroll.add(self.LeftWin)
		self.LeftScroll.props.hscrollbar_policy = gtk.POLICY_NEVER
		self.LeftScroll.props.vscrollbar_policy = gtk.POLICY_AUTOMATIC
		self.Widget.pack_start(self.LeftScroll,False,False)
		self.Widget.pack_start(self.ClientArea,True,True)
		for Plugin in Plugins:
			self.AddItem(PlugItem(Plugin))
		self.SelectItem(None,None,0)


class CatItem(Item):
	def __init__(self,Name,Plugins):
		self.Selector = gtk.EventBox()
		self.VBox = gtk.VBox()
		self.Selector.add(self.VBox)
		if (Name == ''):
			Name = 'Uncategorized'
		self.Name = Name
		self.Label = gtk.Label(Name)
		self.VBox.pack_start(self.Label)
		self.Chooser = PlugChooser(Plugins)
		self.PlClient = self.Chooser.Widget
		self.Client = gtk.VBox()
		self.Client.pack_start(gtk.Label(Name),False,False)
		self.Client.pack_start(gtk.HSeparator(),False,False)
		self.Client.pack_start(self.PlClient,True,True)

class CatChooser(Chooser):
	def __init__(self,Categories):
		Chooser.__init__(self)
		self.Strip = gtk.HBox(True)
		self.Widget = gtk.VBox()
		self.Widget.pack_start(self.Strip,False,False)
		self.Widget.pack_start(gtk.HSeparator(),False,False)
		self.Widget.pack_start(self.ClientArea,True,True)
		for Name in Categories:
			self.AddItem(CatItem(Name,Categories[Name]))
		self.SelectItem(None,None,0)

def Quit(foo):
	gtk.main_quit()

MainWin = gtk.Window()
MainWin.connect('destroy',Quit)
Ctx = bsettings.Context()
n = CatChooser(Ctx.Categories)
MainWin.add(n.Widget)
MainWin.show_all()
gtk.main()
